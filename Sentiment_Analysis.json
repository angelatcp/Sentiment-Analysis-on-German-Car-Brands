{"paragraphs":[{"text":"%md\n<center>\n<img src=\"http://spark-mooc.github.io/web-assets/images/ta_Spark-logo-small.png\" width=\"200\" height=\"200\" />\n<p></p>\n<img src=\"http://spark-mooc.github.io/web-assets/images/python-logo-master-v3-TM-flattened_small.png\" width=\"200\" height=\"200\" />\n\n<img src=\"https://www.vectorlogo.zone/logos/apache_kafka/apache_kafka-ar21.svg\" width=\"200\" height=\"200\" /> \n\n<img src=\"https://www.teaminformatics.com/wp-content/uploads/2017/05/elasticsearch-logo-1200x625.png\" width=\"200\" height=\"200\" />\n\n<img src=\"https://oliverveits.files.wordpress.com/2016/11/kibana-logo-color-v.png\" width=\"200\" height=\"200\" />\n</center>\n\n\n# Group Assignment Big Data Tools 2\n\nIn this assignment you are going to build on the results of the individual assignment and give the Belgian second hand car dealer some more advice.\n\nThe car dealer has decided he wants to focus his activities on **German cars** (Audi, BMW, Mercedes, Opel, Porsche, and Volkswagen (VW)). He has heard rumours that it is possible analyze _tweets_ of cars with **streaming technology** so he asks you to do this for him. Additionally he wants to build a website with a **search engine**. He asks you to demo some searching capabilities with **ElasticSearch**.\n\nCan you help the Belgian car dealer by answering his questions?\n\n\n<center><img src=\"https://www.ocbc.com/assets/images/uploads/loans/inside_carloan/autofinancing_used_car.png\"></center>","user":"anonymous","dateUpdated":"2017-12-12T14:52:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"java.lang.NullPointerException\n\tat org.apache.zeppelin.interpreter.InterpreterOutput.write(InterpreterOutput.java:287)\n\tat org.apache.zeppelin.interpreter.InterpreterResult.add(InterpreterResult.java:85)\n\tat org.apache.zeppelin.interpreter.InterpreterResult.<init>(InterpreterResult.java:70)\n\tat org.apache.zeppelin.markdown.Markdown.interpret(Markdown.java:100)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:97)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:498)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:175)\n\tat org.apache.zeppelin.scheduler.ParallelScheduler$JobRunner.run(ParallelScheduler.java:162)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}]},"apps":[],"jobName":"paragraph_1510041338250_1331406067","id":"20171107-075538_110666415","dateCreated":"2017-11-07T07:55:38+0000","dateStarted":"2017-12-12T14:52:47+0000","dateFinished":"2017-12-12T14:52:48+0000","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:341"},{"text":"%md\n## Practical\n\nGrading percentage: 40%\n\nDue Date: 20/12/2017\n\nSend assignment to: s.geuens@ieseg.fr\n\nAccepted formats: Zeppelin notebook (.json)\n\nIf you have finished the assignment, save this notebook pressing the \"Export this note\" icon on top in the middle of this page. The notebook will be saved as a .json file on your local machine. Rename this file as **lastname1_firstname1_&_lastname2_firstname2_&_....json**. and send it to s.geuens@ieseg.fr.\n\nYou can include the ElasticSearch code into the Zeppelin notebook using the **%elasticsearch** tag. It is not necessary to develop the code in the notebook. You can write your code in Kibana and afterwards copy it into the Zeppelin notebook.\n","user":"anonymous","dateUpdated":"2017-12-12T14:52:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Practical</h2>\n<p>Grading percentage: 40%</p>\n<p>Due Date: 20/12/2017</p>\n<p>Send assignment to: <a href=\"mailto:&#115;.&#103;&#x65;&#x75;&#x65;&#x6e;&#115;&#x40;&#x69;e&#115;&#x65;&#103;.&#102;&#114;\">&#115;.&#103;&#x65;&#x75;&#x65;&#x6e;&#115;&#x40;&#x69;e&#115;&#x65;&#103;.&#102;&#114;</a></p>\n<p>Accepted formats: Zeppelin notebook (.json)</p>\n<p>If you have finished the assignment, save this notebook pressing the &ldquo;Export this note&rdquo; icon on top in the middle of this page. The notebook will be saved as a .json file on your local machine. Rename this file as <strong>lastname1_firstname1_&amp;_lastname2_firstname2_&amp;_&hellip;.json</strong>. and send it to <a href=\"mailto:&#115;.&#103;e&#x75;&#101;&#x6e;&#x73;&#64;&#105;e&#x73;&#x65;g&#46;&#x66;&#x72;\">&#115;.&#103;e&#x75;&#101;&#x6e;&#x73;&#64;&#105;e&#x73;&#x65;g&#46;&#x66;&#x72;</a>.</p>\n<p>You can include the ElasticSearch code into the Zeppelin notebook using the <strong>%elasticsearch</strong> tag. It is not necessary to develop the code in the notebook. You can write your code in Kibana and afterwards copy it into the Zeppelin notebook.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510041575482_1077592741","id":"20171107-075935_1998451982","dateCreated":"2017-11-07T07:59:35+0000","dateStarted":"2017-12-12T14:52:48+0000","dateFinished":"2017-12-12T14:52:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:342"},{"text":"%md\n## The assignment\n\n**The assignment consists of four major parts:**\n- Part 1: Putting the base file into HDFS\n- Part 2: Reading the file in Spark from HDFS\n- Part 3: Doing transformations and basic actions in Spark\n- Part 4: Calculating ML models in Spark\n- Part 5: Theoretical questions\n\nThis notebook is divided into these five parts. At the start of each part, an explanation of the expectations is given.\n\nThe assignment is grades based on logic and effort, not on final results. If you make mistakes try to complete the steps that follow, even if you cannot complete them correctly anymore. Showing your understanding of what you need to do, is as important as the final results. At the end of each block a test paragraph is included. This test paragraph already gives you an indication whether your answer is right or wrong.\n\n> As mentioned, grades are not only give based on final results. Try to be as complete as possible and make notes using and adding comments (#) or %md cells.","user":"anonymous","dateUpdated":"2017-12-12T14:52:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"java.lang.NullPointerException\n\tat org.apache.zeppelin.interpreter.InterpreterOutput.write(InterpreterOutput.java:287)\n\tat org.apache.zeppelin.interpreter.InterpreterResult.add(InterpreterResult.java:85)\n\tat org.apache.zeppelin.interpreter.InterpreterResult.<init>(InterpreterResult.java:70)\n\tat org.apache.zeppelin.markdown.Markdown.interpret(Markdown.java:100)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:97)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:498)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:175)\n\tat org.apache.zeppelin.scheduler.ParallelScheduler$JobRunner.run(ParallelScheduler.java:162)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}]},"apps":[],"jobName":"paragraph_1510043114938_-2087576116","id":"20171107-082514_1745873002","dateCreated":"2017-11-07T08:25:14+0000","dateStarted":"2017-12-12T14:52:48+0000","dateFinished":"2017-12-12T14:52:48+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:343"},{"text":"%md\n## Part 0: Loading Modules\n\nIn this part the modules used in Part 1-3 are loaded","user":"anonymous","dateUpdated":"2017-12-12T14:52:48+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"java.lang.NullPointerException\n\tat org.apache.zeppelin.interpreter.InterpreterOutput.write(InterpreterOutput.java:287)\n\tat org.apache.zeppelin.interpreter.InterpreterResult.add(InterpreterResult.java:85)\n\tat org.apache.zeppelin.interpreter.InterpreterResult.<init>(InterpreterResult.java:70)\n\tat org.apache.zeppelin.markdown.Markdown.interpret(Markdown.java:100)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:97)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:498)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:175)\n\tat org.apache.zeppelin.scheduler.ParallelScheduler$JobRunner.run(ParallelScheduler.java:162)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}]},"apps":[],"jobName":"paragraph_1510043246658_107647866","id":"20171107-082726_1604477494","dateCreated":"2017-11-07T08:27:26+0000","dateStarted":"2017-12-12T14:52:48+0000","dateFinished":"2017-12-12T14:52:48+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:344"},{"text":"%pyspark\nimport json\n\nfrom pyspark import SparkContext\nfrom pyspark.streaming import StreamingContext\nfrom pyspark.streaming.kafka import KafkaUtils\nfrom pyspark.sql.functions import col, udf\nfrom pyspark.sql.types import *","user":"anonymous","dateUpdated":"2017-12-15T10:16:03+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1510043252582_1177249808","id":"20171107-082732_311337148","dateCreated":"2017-11-07T08:27:32+0000","dateStarted":"2017-12-15T10:16:03+0000","dateFinished":"2017-12-15T10:16:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:345"},{"text":"%md\n## Part 1: Streaming\n\nYour first task is to create a Kafka producer that collect all tweet about the German car brands (Audi, BMW, Mercedes, Opel, Porsche, and Volkswagen (VW)). Collect these tweets in a Kafka topic called \"cars\".\n\n> Note: As you cannot do this task in Zeppelin, describe the steps you took together with the commands your ran in the %md cell below.","user":"anonymous","dateUpdated":"2017-12-12T14:52:48+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Part 1: Streaming</h2>\n<p>Your first task is to create a Kafka producer that collect all tweet about the German car brands (Audi, BMW, Mercedes, Opel, Porsche, and Volkswagen (VW)). Collect these tweets in a Kafka topic called &ldquo;cars&rdquo;.</p>\n<blockquote>\n  <p>Note: As you cannot do this task in Zeppelin, describe the steps you took together with the commands your ran in the %md cell below.</p>\n</blockquote>\n</div>"}]},"apps":[],"jobName":"paragraph_1510052504496_-748947002","id":"20171107-110144_425032573","dateCreated":"2017-11-07T11:01:44+0000","dateStarted":"2017-12-12T14:52:49+0000","dateFinished":"2017-12-12T14:52:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:346"},{"text":"%md\n#### Commands\n\n#start Zookeeper\n/usr/share/kafka/bin/zookeeper-server-start.sh /usr/share/kafka/config/zookeeper.properties &\n\n#start kafka\n/usr/share/kafka/bin/kafka-server-start.sh /usr/share/kafka/config/server.properties &\n\n#go to directory\ncd ~/streaming/spark-streaming-twitter-kafka-master\n\n#set credentials\nsudo vi twitter_config.py\n\n#consumer_key = \"TzA0I4……\"\n#consumer_secret = \"BtBqYtZ……\"\n#access_token = \"2754263935-qFk……\"\n#access_token_secret = \"teNXwpSQy7……\"\n#WORDS_TO_TRACK = [\"Audi\", \"BMW\", \"Mercedes\", \"Opel\", \"Porsche\", \"Volkswagen\", \"VW\"]\n#topic = b'cars'\n\n\n#create topic\nkafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic cars\n\n\n#list of topics to check if list is created\nkafka-topics.sh --list --zookeeper localhost:2181\n\n#producer\npython2 ~/streaming/spark-streaming-twitter-kafka-master/kafka-twitter-producer.py\n\n#consumer in a new window\nkafka-console-consumer.sh --bootstrap-server localhost:9092 --topic cars --from-beginning \n\n\n","user":"anonymous","dateUpdated":"2017-12-15T09:48:44+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Commands</h4>\n<p>#start Zookeeper<br/>/usr/share/kafka/bin/zookeeper-server-start.sh /usr/share/kafka/config/zookeeper.properties &amp;</p>\n<p>#start kafka<br/>/usr/share/kafka/bin/kafka-server-start.sh /usr/share/kafka/config/server.properties &amp;</p>\n<p>#go to directory<br/>cd ~/streaming/spark-streaming-twitter-kafka-master</p>\n<p>#set credentials<br/>sudo vi twitter_config.py</p>\n<p>#consumer_key = &ldquo;TzA0I4……&rdquo;</p>\n<p>#consumer_secret = &ldquo;BtBqYtZ……&rdquo;</p>\n<p>#access_token = &ldquo;2754263935-qFk……&rdquo;</p>\n<p>#access_token_secret = &ldquo;teNXwpSQy7……&rdquo;</p>\n<p>#WORDS_TO_TRACK = [&ldquo;Audi&rdquo;, &ldquo;BMW&rdquo;, &ldquo;Mercedes&rdquo;, &ldquo;Opel&rdquo;, &ldquo;Porsche&rdquo;, &ldquo;Volkswagen&rdquo;]</p>\n<p>#topic = b&rsquo;cars&rsquo;</p>\n<p>#create topic<br/>kafka-topics.sh &ndash;create &ndash;zookeeper localhost:2181 &ndash;replication-factor 1 &ndash;partitions 1 &ndash;topic cars</p>\n<p>#list of topics to check if list is created<br/>kafka-topics.sh &ndash;list &ndash;zookeeper localhost:2181</p>\n<p>#producer<br/>python2 ~/streaming/spark-streaming-twitter-kafka-master/kafka-twitter-producer.py</p>\n<p>#consumer in a new window<br/>kafka-console-consumer.sh &ndash;bootstrap-server localhost:9092 &ndash;topic cars &ndash;from-beginning</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510052742132_-1984823411","id":"20171107-110542_375204454","dateCreated":"2017-11-07T11:05:42+0000","dateStarted":"2017-12-12T14:52:50+0000","dateFinished":"2017-12-12T14:52:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:347"},{"text":"%md\n## Part 2: Spark Streaming\nIn class you have seen how to consume a Kafka topic using Spark Streaming and add a sentiment to the tweets. In this part, we are going to do exactly the same. Of course some additional transformations are wanted.\n\n* 2a) Define general RDD helper functions\n* 2b) Sentiment analysis: Create helper lists and define 7 sentiment analysis functions\n* 2c) Brand function\n* 2d) Combine all helper functions in DFActions function\n* 2e) Specifying arguments and parameters\n* 2f) Initialize the StreamingContext (ssc)\n* 2g) Initializing of the stream and creation of the execution plan\n* 2h) Start the stream","user":"anonymous","dateUpdated":"2017-12-12T14:52:50+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Part 2: Spark Streaming</h2>\n<p>In class you have seen how to consume a Kafka topic using Spark Streaming and add a sentiment to the tweets. In this part, we are going to do exactly the same. Of course some additional transformations are wanted.</p>\n<ul>\n  <li>2a) Define general RDD helper functions</li>\n  <li>2b) Sentiment analysis: Create helper lists and define 7 sentiment analysis functions</li>\n  <li>2c) Brand function</li>\n  <li>2d) Combine all helper functions in DFActions function</li>\n  <li>2e) Specifying arguments and parameters</li>\n  <li>2f) Initialize the StreamingContext (ssc)</li>\n  <li>2g) Initializing of the stream and creation of the execution plan</li>\n  <li>2h) Start the stream</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1510052749784_-633954698","id":"20171107-110549_1712093619","dateCreated":"2017-11-07T11:05:49+0000","dateStarted":"2017-12-12T14:52:50+0000","dateFinished":"2017-12-12T14:52:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:348"},{"text":"%md\n### 2a) Define general RDD helper functions\n\nThe `selectFields()` and `makeSchema()` function need to be defined. These functions will help to transform the RDDs.","user":"anonymous","dateUpdated":"2017-12-12T14:52:50+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>2a) Define general RDD helper functions</h3>\n<p>The <code>selectFields()</code> and <code>makeSchema()</code> function need to be defined. These functions will help to transform the RDDs.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510052944518_-1352572054","id":"20171107-110904_1047191491","dateCreated":"2017-11-07T11:09:04+0000","dateStarted":"2017-12-12T14:52:51+0000","dateFinished":"2017-12-12T14:52:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:349"},{"text":"%pyspark\n\n# define selectFields() \ndef selectFields(tweet, fields):     \n    \"\"\" Function that translates a tweet to a list of selected values:     \n    args:         \n        tweet = a tweet (string containing json structure)         \n        fiels = list of tuples, where each tuple contains two strings (string, string). The tuples contains (\"field_name\", \"field_type\"). If we need a nested field_name, use \".\" to separate parent and child (remark: here we can have at most 5 nested levels.)     \n    return:         \n        list of values of the selected field_name keys     \n    \"\"\"             \n    l = list()     \n    for field in fields:         \n        try:             \n            if \".\" in field[0]:                 \n                f = field[0].split(\".\") \n                if len(f) == 2:                     \n                    d = tweet[f[0]][f[1]]                 \n                elif len(f) == 3:                     \n                    d = tweet[f[0]][f[1]][f[2]]                 \n                elif len(f) == 4:                     \n                    d = tweet[f[0]][f[1]][f[2]][f[3]]                \n                elif len(f) == 5:                     \n                    d = tweet[f[0]][f[1]][f[2]][f[3]][f[4]]            \n            else:                 \n                d = tweet[field[0]]         \n        except:             \n            d = None         \n        l.append(d)     \n    return l \n    \n# define makeSchema \ndef makeSchema(fields):\n    schema=list()\n    for field in fields:\n        if field[1] == \"int\":\n            s = StructField(field[0], IntegerType(), True)\n        if field[1] == \"long\":\n            s = StructField(field[0], LongType(), True)\n        elif field[1] == \"date\":\n            s = StructField(field[0], DateType(), True)\n        elif field[1] == \"str\":\n            s = StructField(field[0], StringType(), True)\n        elif field[1] == \"float\":\n            s = StructField(field[0], FloatType(), True)\n        schema.append(s)\n    return StructType(schema)\n\n","user":"anonymous","dateUpdated":"2017-12-15T10:16:27+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1510056821414_-1953419617","id":"20171107-121341_44862451","dateCreated":"2017-11-07T12:13:41+0000","dateStarted":"2017-12-15T10:16:27+0000","dateFinished":"2017-12-15T10:16:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:350"},{"text":"%md\n### 2b) Sentiment analysis: Create helper lists and define 7 sentiment analysis functions\n\nAs done in class, the same **postive** and **negative** helper list need to be created to use later in application.\n\nIn class we saw how to define a general `sentimentAnalysis()` function. Here we are going to repeat this sentiment analysis function, but are ging to create 6 additional sentimentAnalysis functions. One for for each car brand. The functions return the semintiment towards the brand if the brand name is included in the text of the tweet, otherwise None. This will create for example a function called `SentimentAnalysisAudi()`. Make sure to transform them to UDF, so you can use them on dataframes in the streaming context.","user":"anonymous","dateUpdated":"2017-12-12T14:52:51+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>2b) Sentiment analysis: Create helper lists and define 7 sentiment analysis functions</h3>\n<p>As done in class, the same <strong>postive</strong> and <strong>negative</strong> helper list need to be created to use later in application.</p>\n<p>In class we saw how to define a general <code>sentimentAnalysis()</code> function. Here we are going to repeat this sentiment analysis function, but are ging to create 6 additional sentimentAnalysis functions. One for for each car brand. The functions return the semintiment towards the brand if the brand name is included in the text of the tweet, otherwise None. This will create for example a function called <code>SentimentAnalysisAudi()</code>. Make sure to transform them to UDF, so you can use them on dataframes in the streaming context.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510056944055_534133619","id":"20171107-121544_1149344387","dateCreated":"2017-11-07T12:15:44+0000","dateStarted":"2017-12-12T14:52:51+0000","dateFinished":"2017-12-12T14:52:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:351"},{"text":"%pyspark\n# Create helper lists\npositive = [x[\"_c0\"] for x in spark.read.csv(\"file:///home/bigdata/streaming/data/input/positive-words.txt\").collect()]\nnegative = [x[\"_c0\"] for x in spark.read.csv(\"file:///home/bigdata/streaming/data/input/negative-words.txt\").collect()]\nprint(len(positive))\nprint(len(negative))","user":"anonymous","dateUpdated":"2017-12-15T10:16:31+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"2006\n4783\n"}]},"apps":[],"jobName":"paragraph_1510059180458_1137054282","id":"20171107-125300_375493017","dateCreated":"2017-11-07T12:53:00+0000","dateStarted":"2017-12-15T10:16:31+0000","dateFinished":"2017-12-15T10:16:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:352"},{"text":"%pyspark\n# Create SentimentAnalysis Fucntion\ndef sentimentAnalysis(text):\n    words = text.lower().split()\n    pos_words = len(list(set(words).intersection(positive)))\n    neg_words = len(list(set(words).intersection(negative)))\n    if pos_words > neg_words:\n        sentiment = \"positive\"\n    elif pos_words < neg_words:\n        sentiment = \"negative\"\n    else:\n        sentiment = \"neutral\"\n    return sentiment\n    \nudfSentimentAnalysis = udf(sentimentAnalysis, StringType())\n\n# Create SentimentAnalysis Fucntion for Audi\ndef sentimentAnalysisAudi(text):\n    words = text.lower()\n    if words.find(\"audi\") >= 0:\n        words = words.split()\n        pos_words = len(list(set(words).intersection(positive)))\n        neg_words = len(list(set(words).intersection(negative)))\n        if pos_words > neg_words:\n            sentiment = \"positive\"\n        elif pos_words < neg_words:\n            sentiment = \"negative\"\n        else:\n            sentiment = \"neutral\"\n        return sentiment\n    else:\n        sentiment = 'none'\n    return sentiment\n    \nudfSentimentAnalysisAudi = udf(sentimentAnalysisAudi, StringType())\n\n# Create SentimentAnalysis Fucntion for BMW \ndef sentimentAnalysisBMW(text): \n    words = text.lower()\n    if words.find(\"bmw\") >= 0:\n        words = words.split()\n        pos_words = len(list(set(words).intersection(positive)))\n        neg_words = len(list(set(words).intersection(negative)))\n        if pos_words > neg_words:\n            sentiment = \"positive\"\n        elif pos_words < neg_words:\n            sentiment = \"negative\"\n        else:\n            sentiment = \"neutral\"\n        return sentiment\n    else:\n        sentiment = 'none'\n    return sentiment\n    \nudfSentimentAnalysisBMW = udf(sentimentAnalysisBMW, StringType()) \n  \n# Create SentimentAnalysis Fucntion for Mercedes \ndef sentimentAnalysisMercedes(text): \n    words = text.lower()\n    if words.find(\"mercedes\") >= 0:\n        words = words.split()\n        pos_words = len(list(set(words).intersection(positive)))\n        neg_words = len(list(set(words).intersection(negative)))\n        if pos_words > neg_words:\n            sentiment = \"positive\"\n        elif pos_words < neg_words:\n            sentiment = \"negative\"\n        else:\n            sentiment = \"neutral\"\n        return sentiment\n    else:\n        sentiment = 'none'\n    return sentiment\n    \nudfSentimentAnalysisMercedes = udf(sentimentAnalysisMercedes, StringType()) \n  \n# Create SentimentAnalysis Fucntion for Opel \ndef sentimentAnalysisOpel(text): \n    words = text.lower()\n    if words.find(\"opel\") >= 0:\n        words = words.split()\n        pos_words = len(list(set(words).intersection(positive)))\n        neg_words = len(list(set(words).intersection(negative)))\n        if pos_words > neg_words:\n            sentiment = \"positive\"\n        elif pos_words < neg_words:\n            sentiment = \"negative\"\n        else:\n            sentiment = \"neutral\"\n        return sentiment\n    else:\n        sentiment = 'none'\n    return sentiment\n    \nudfSentimentAnalysisOpel = udf(sentimentAnalysisOpel, StringType()) \n  \n## Create SentimentAnalysis Fucntion Porsche \ndef sentimentAnalysisPorsche(text): \n    words = text.lower()\n    if words.find(\"porsche\") >= 0:\n        words = words.split()\n        pos_words = len(list(set(words).intersection(positive)))\n        neg_words = len(list(set(words).intersection(negative)))\n        if pos_words > neg_words:\n            sentiment = \"positive\"\n        elif pos_words < neg_words:\n            sentiment = \"negative\"\n        else:\n            sentiment = \"neutral\"\n        return sentiment\n    else:\n        sentiment = 'none'\n    return sentiment\n    \nudfSentimentAnalysisPorsche = udf(sentimentAnalysisPorsche, StringType()) \n  \n# Create SentimentAnalysis Fucntion Volkswagen / VW \ndef sentimentAnalysisVolkswagen(text): \n    words = text.lower()\n    if words.find(\"volkswagen\") >= 0 or words.find(\"vw\") >= 0:\n        words = words.split()\n        pos_words = len(list(set(words).intersection(positive)))\n        neg_words = len(list(set(words).intersection(negative)))\n        if pos_words > neg_words:\n            sentiment = \"positive\"\n        elif pos_words < neg_words:\n            sentiment = \"negative\"\n        else:\n            sentiment = \"neutral\"\n        return sentiment\n    else:\n        sentiment = 'none'\n    return sentiment\n    \nudfSentimentAnalysisVolkswagen = udf(sentimentAnalysisVolkswagen, StringType()) ","user":"anonymous","dateUpdated":"2017-12-15T10:16:37+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1510057271586_2145353099","id":"20171107-122111_38678556","dateCreated":"2017-11-07T12:21:11+0000","dateStarted":"2017-12-15T10:16:37+0000","dateFinished":"2017-12-15T10:16:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:353"},{"text":"%md\n### 2c) Brand function\n\nA final helper function is the `brand()`function. This function extracts the brand from text and creates a column **brand** containing the name of the brand in lower case string.","user":"anonymous","dateUpdated":"2017-12-12T14:52:52+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>2c) Brand function</h3>\n<p>A final helper function is the <code>brand()</code>function. This function extracts the brand from text and creates a column <strong>brand</strong> containing the name of the brand in lower case string.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510057970724_1351023409","id":"20171107-123250_1714831889","dateCreated":"2017-11-07T12:32:50+0000","dateStarted":"2017-12-12T14:52:52+0000","dateFinished":"2017-12-12T14:52:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:354"},{"text":"%pyspark\n#[\"Audi\", \"BMW\", \"Mercedes\", \"Opel\", \"Porsche\", \"Volkswagen\"]\ndef brand(text):  \n    text = text.lower() \n    if text.find(\"audi\") >= 0:  \n        brand = \"audi\" \n    elif text.find('bmw') >= 0:  \n        brand = 'bmw' \n    elif text.find('mercedes') >= 0: \n        brand = 'mercedes' \n    elif text.find('opel') >= 0: \n        brand = 'opel' \n    elif text.find('porsche') >= 0: \n        brand = 'porsche' \n    elif text.find('volkswagen')>= 0 or text.find('vw') >= 0:  \n        brand = 'volkswagen'\n    else :\n        brand = 'none'\n    return brand \n  \n\nudfBrand = udf(brand, StringType()) \n\n","user":"anonymous","dateUpdated":"2017-12-15T10:16:43+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1510058219616_-98155487","id":"20171107-123659_2081287618","dateCreated":"2017-11-07T12:36:59+0000","dateStarted":"2017-12-15T10:16:43+0000","dateFinished":"2017-12-15T10:16:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:355"},{"text":"%md\n### 2d) Combine all helper functions in DFActions function\n\nAs done in class, a `DFActions()`should be defined that transforms the RDD to DF and executes all functions defined in 2b and 2c.\n\nAdditionally, you already need to prepare for part 3 and save the DF to be able to use it in ElasticSearch in the third part of this assignment. There are two options:\n1) Write the DF directly to **ElasticSearch**, more specific to /cars_twitter/default (/index/type).\n2) If your are not able to execute option 1, you can write the resulting DF  to a **local JSON file** with name: \"/home/bigdata/assignment/data/output/cars_twitter\".\n\n> Note: We want to collect all the tweets, so use the **append** mode. In this way new run will be append to the same JSON file","user":"anonymous","dateUpdated":"2017-12-12T14:52:52+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>2d) Combine all helper functions in DFActions function</h3>\n<p>As done in class, a <code>DFActions()</code>should be defined that transforms the RDD to DF and executes all functions defined in 2b and 2c.</p>\n<p>Additionally, you already need to prepare for part 3 and save the DF to be able to use it in ElasticSearch in the third part of this assignment. There are two options:<br/>1) Write the DF directly to <strong>ElasticSearch</strong>, more specific to /cars_twitter/default (/index/type).<br/>2) If your are not able to execute option 1, you can write the resulting DF to a <strong>local JSON file</strong> with name: &ldquo;/home/bigdata/assignment/data/output/cars_twitter&rdquo;.</p>\n<blockquote>\n  <p>Note: We want to collect all the tweets, so use the <strong>append</strong> mode. In this way new run will be append to the same JSON file</p>\n</blockquote>\n</div>"}]},"apps":[],"jobName":"paragraph_1510059045264_-1594509666","id":"20171107-125045_1898757169","dateCreated":"2017-11-07T12:50:45+0000","dateStarted":"2017-12-12T14:52:52+0000","dateFinished":"2017-12-12T14:52:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:356"},{"text":"%pyspark\ndef DFActions(rdd):\n    DF = rdd.toDF(schema).filter(col(\"id\").isNotNull())\n    DFSentiment = DF.withColumn(\"Brand\",  udfBrand(\"text\"))\n    DFSentiment = DFSentiment.withColumn(\"sentiment\", udfSentimentAnalysis(\"text\"))\n    DFSentiment = DFSentiment.withColumn(\"Audi\", udfSentimentAnalysisAudi(\"text\"))\n    DFSentiment = DFSentiment.withColumn(\"BMW\", udfSentimentAnalysisBMW(\"text\"))\n    DFSentiment = DFSentiment.withColumn(\"Mercedes\", udfSentimentAnalysisMercedes(\"text\"))\n    DFSentiment = DFSentiment.withColumn(\"Opel\", udfSentimentAnalysisOpel(\"text\"))\n    DFSentiment = DFSentiment.withColumn(\"Porsche\", udfSentimentAnalysisPorsche(\"text\"))\n    DFSentiment = DFSentiment.withColumn(\"Volkswagen\", udfSentimentAnalysisVolkswagen(\"text\"))\n    \n    # Show the 5 first columns and print the number tweets read during the last run    \n    DFSentiment.show(5)\n    print(\"Number of tweet last \" + str(seconds_to_run) + \" seconds: \" + str(DF.count()))\n    \n    # Write resulting df to local JSON file\n    DFSentiment.write.mode('append').parquet(\"/home/bigdata/assignment/data/output/cars_twitter\")\n    \n    #check if saved in home\n    #cd /home/bigdata/assignment/data/output/cars_twitter\n    #ls\n   \n ","user":"anonymous","dateUpdated":"2017-12-15T10:30:14+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1510059401882_-1526087303","id":"20171107-125641_2004308809","dateCreated":"2017-11-07T12:56:41+0000","dateStarted":"2017-12-15T10:16:47+0000","dateFinished":"2017-12-15T10:16:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:357"},{"text":"%md\n### 2e) Specifying arguments and parameters\n\nThe helper functions take arguments as input. In the cell below, the **fields** argument for the **selectFields** and **makeSchema** function is defined. Additionally we define to which topic Spark should listen, the interval Spark Streaming should run and finally the location of Zookeeper.\n\nHere we want to retain the \"id\", \"created_at\", \"text\", \"user.location\", \"entities.hashtags\", \"entities.user_mentions\", \"lang\", and \"timestamp_ms\" fields.","user":"anonymous","dateUpdated":"2017-12-12T14:52:52+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>2e) Specifying arguments and parameters</h3>\n<p>The helper functions take arguments as input. In the cell below, the <strong>fields</strong> argument for the <strong>selectFields</strong> and <strong>makeSchema</strong> function is defined. Additionally we define to which topic Spark should listen, the interval Spark Streaming should run and finally the location of Zookeeper.</p>\n<p>Here we want to retain the &ldquo;id&rdquo;, &ldquo;created_at&rdquo;, &ldquo;text&rdquo;, &ldquo;user.location&rdquo;, &ldquo;entities.hashtags&rdquo;, &ldquo;entities.user_mentions&rdquo;, &ldquo;lang&rdquo;, and &ldquo;timestamp_ms&rdquo; fields.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510061399776_114315609","id":"20171107-132959_229994861","dateCreated":"2017-11-07T13:29:59+0000","dateStarted":"2017-12-12T14:52:53+0000","dateFinished":"2017-12-12T14:52:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:358"},{"text":"%pyspark\nfields = [(\"id\", \"long\"), (\"created_at\", \"str\"), (\"text\", \"str\"), (\"user.location\", \"str\"), (\"lang\", \"str\"), (\"timestamp_ms\", \"str\")]","user":"anonymous","dateUpdated":"2017-12-15T10:16:50+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":true},"editorMode":"ace/mode/python","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1510061441986_-290162754","id":"20171107-133041_342633679","dateCreated":"2017-11-07T13:30:41+0000","dateStarted":"2017-12-15T10:16:50+0000","dateFinished":"2017-12-15T10:16:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:359"},{"text":"%pyspark\n\nzkQuorum = \"localhost:2181\"\ntopic = \"cars\"\n\nseconds_to_run = 10","user":"anonymous","dateUpdated":"2017-12-15T10:16:52+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1510061668577_-804284687","id":"20171107-133428_389331652","dateCreated":"2017-11-07T13:34:28+0000","dateStarted":"2017-12-15T10:16:52+0000","dateFinished":"2017-12-15T10:16:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:360"},{"text":"%md\n### 2f) Initialize the StreamingContext (ssc)\n","user":"anonymous","dateUpdated":"2017-12-12T15:19:10+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>2f) Initialize the StreamingContext (ssc)</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1510061692386_1542729576","id":"20171107-133452_1005759701","dateCreated":"2017-11-07T13:34:52+0000","dateStarted":"2017-12-12T15:19:10+0000","dateFinished":"2017-12-12T15:19:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:361"},{"text":"%pyspark\nssc = StreamingContext(sc, seconds_to_run)","user":"anonymous","dateUpdated":"2017-12-15T10:16:54+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1510061731027_985105826","id":"20171107-133531_175495022","dateCreated":"2017-11-07T13:35:31+0000","dateStarted":"2017-12-15T10:16:54+0000","dateFinished":"2017-12-15T10:16:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:362"},{"text":"%md\n### 2g) Initializing of the stream and creation of the  execution plan","user":"anonymous","dateUpdated":"2017-12-12T14:52:54+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>2g) Initializing of the stream and creation of the execution plan</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1510061820050_-16456857","id":"20171107-133700_685085197","dateCreated":"2017-11-07T13:37:00+0000","dateStarted":"2017-12-12T14:52:54+0000","dateFinished":"2017-12-12T14:52:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:363"},{"text":"%pyspark\n# initialization of the Stream\ntweets = KafkaUtils.createStream(ssc, zkQuorum, \"spark-streaming-consumer\", {topic: 1})\n\n# string to directory\ntweet = tweets.map(lambda a: json.loads(a[1]))\n\n# select the necessary fields\ntweet_selected = tweet.map(lambda c: selectFields(c, fields))\n\n# define schema\nschema = makeSchema(fields)\n\n# transform to DF and perform the DFActions\ntweet_selected.foreachRDD(DFActions)\n","user":"anonymous","dateUpdated":"2017-12-15T10:16:57+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1510061847195_-1404399382","id":"20171107-133727_1269006101","dateCreated":"2017-11-07T13:37:27+0000","dateStarted":"2017-12-15T10:16:57+0000","dateFinished":"2017-12-15T10:16:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:364"},{"text":"%md\n### 2h) Start the stream\n\nLet this stream run for about 20 minutes to collect enough tweets about the German cars","user":"anonymous","dateUpdated":"2017-12-12T14:52:54+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>2h) Start the stream</h3>\n<p>Let this stream run for about 20 minutes to collect enough tweets about the German cars</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510061875309_1694429556","id":"20171107-133755_1027667664","dateCreated":"2017-11-07T13:37:55+0000","dateStarted":"2017-12-12T14:52:54+0000","dateFinished":"2017-12-12T14:52:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:365"},{"text":"%pyspark\nssc.start()\nssc.awaitTermination()","user":"anonymous","dateUpdated":"2017-12-15T10:17:00+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":294,"optionOpen":false}}},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","tableHide":false,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"+------------------+--------------------+--------------------+--------------------+----+-------------+--------+---------+-------+-------+--------+----+-------+----------+\n|                id|          created_at|                text|       user.location|lang| timestamp_ms|   Brand|sentiment|   Audi|    BMW|Mercedes|Opel|Porsche|Volkswagen|\n+------------------+--------------------+--------------------+--------------------+----+-------------+--------+---------+-------+-------+--------+----+-------+----------+\n|941612663293075456|Fri Dec 15 10:15:...|BMW: stephdemirj ...|      Burgos, España|  en|1513332927903|     bmw|  neutral|   none|neutral|    none|none|   none|      none|\n|941612686059757568|Fri Dec 15 10:15:...|10-11 Mercedes S-...|                null|  en|1513332933331|mercedes|  neutral|   none|   none| neutral|none|   none|      none|\n|941612733836828672|Fri Dec 15 10:15:...|Thieves stole a h...|              global|  en|1513332944722|mercedes| negative|   none|   none|negative|none|   none|      none|\n|941612741248331776|Fri Dec 15 10:15:...|Audi Q8 Spied Fro...|United States of ...|  en|1513332946489|    audi|  neutral|neutral|   none|    none|none|   none|      none|\n|941612743131648000|Fri Dec 15 10:15:...|2019 Audi RS7 Tes...|United States of ...|  en|1513332946938|    audi|  neutral|neutral|   none|    none|none|   none|      none|\n+------------------+--------------------+--------------------+--------------------+----+-------------+--------+---------+-------+-------+--------+----+-------+----------+\nonly showing top 5 rows\n\nNumber of tweet last 10 seconds: 37\n+------------------+--------------------+--------------------+-------------+----+-------------+-------+---------+--------+----+--------+----+--------+----------+\n|                id|          created_at|                text|user.location|lang| timestamp_ms|  Brand|sentiment|    Audi| BMW|Mercedes|Opel| Porsche|Volkswagen|\n+------------------+--------------------+--------------------+-------------+----+-------------+-------+---------+--------+----+--------+----+--------+----------+\n|941613094022799360|Fri Dec 15 10:17:...|RT @_b_bh0506: Wo...|         null|  en|1513333030597|   audi| positive|positive|none|    none|none|    none|      none|\n|941613111316008960|Fri Dec 15 10:17:...|Please RT? #cars ...|         null|  en|1513333034720|   audi| positive|positive|none|    none|none|    none|      none|\n|941613113140547584|Fri Dec 15 10:17:...|Tier 14 : Cup - P...|         null|  en|1513333035155|porsche| positive|    none|none|    none|none|positive|      none|\n|941613113740107776|Fri Dec 15 10:17:...|RT @vehiclealert:...|      Butwal |  en|1513333035298|   audi|  neutral| neutral|none|    none|none|    none|      none|\n|941613119276797952|Fri Dec 15 10:17:...|RT @Preciousmetal...|         null|  en|1513333036618|   none| positive|    none|none|    none|none|    none|      none|\n+------------------+--------------------+--------------------+-------------+----+-------------+-------+---------+--------+----+--------+----+--------+----------+\n\nNumber of tweet last 10 seconds: 5\n+------------------+--------------------+--------------------+-------------+----+-------------+--------+---------+----+-------+--------+----+-------+----------+\n|                id|          created_at|                text|user.location|lang| timestamp_ms|   Brand|sentiment|Audi|    BMW|Mercedes|Opel|Porsche|Volkswagen|\n+------------------+--------------------+--------------------+-------------+----+-------------+--------+---------+----+-------+--------+----+-------+----------+\n|941613143297585153|Fri Dec 15 10:17:...|BMW OEM E82 E88 L...|         null|  en|1513333042345|     bmw|  neutral|none|neutral|    none|none|   none|      none|\n|941613151061032960|Fri Dec 15 10:17:...|RT @OozingKraken:...|         null|  en|1513333044196|mercedes| negative|none|   none|negative|none|   none|      none|\n+------------------+--------------------+--------------------+-------------+----+-------------+--------+---------+----+-------+--------+----+-------+----------+\n\nNumber of tweet last 10 seconds: 2\n"},{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-8101107786115135833.py\", line 367, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-8101107786115135833.py\", line 360, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\n  File \"/usr/share/spark/python/pyspark/streaming/context.py\", line 206, in awaitTermination\n    self._jssc.awaitTermination()\n  File \"/usr/share/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py\", line 1131, in __call__\n    answer = self.gateway_client.send_command(command)\n  File \"/usr/share/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py\", line 883, in send_command\n    response = connection.send_command(command)\n  File \"/usr/share/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py\", line 1028, in send_command\n    answer = smart_decode(self.stream.readline()[:-1])\n  File \"/usr/lib/python2.7/socket.py\", line 451, in readline\n    data = self._sock.recv(self._rbufsize)\n  File \"/usr/share/spark/python/pyspark/context.py\", line 237, in signal_handler\n    raise KeyboardInterrupt()\nKeyboardInterrupt\n\n"}]},"apps":[],"jobName":"paragraph_1510062055098_-1399707419","id":"20171107-134055_202904765","dateCreated":"2017-11-07T13:40:55+0000","dateStarted":"2017-12-15T10:17:00+0000","dateFinished":"2017-12-15T10:17:35+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:366"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2017-12-12T14:52:54+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1512819000271_-854031625","id":"20171209-113000_1113624598","dateCreated":"2017-12-09T11:30:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:367"},{"text":"%md\n## Part 3: ElasticSearch\n\nIn part 2 we have performed streaming sentiment analysis. The Belgian dealer is pleased to see the results. Nevertheless he wants to go a step further. He wants to create a search engines:\n1) A search engine on his website to search for cars\n2) An internal search engine in which he can search the tweets for German cars\n\nThe car dealer wants to be convinced of the power of ElasticSearch and askes you to run 15 queries. Are you able to construct these queries?","user":"anonymous","dateUpdated":"2017-12-12T14:52:55+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Part 3: ElasticSearch</h2>\n<p>In part 2 we have performed streaming sentiment analysis. The Belgian dealer is pleased to see the results. Nevertheless he wants to go a step further. He wants to create a search engines:<br/>1) A search engine on his website to search for cars<br/>2) An internal search engine in which he can search the tweets for German cars</p>\n<p>The car dealer wants to be convinced of the power of ElasticSearch and askes you to run 15 queries. Are you able to construct these queries?</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510062990474_1844044852","id":"20171107-135630_514010259","dateCreated":"2017-11-07T13:56:30+0000","dateStarted":"2017-12-12T14:52:55+0000","dateFinished":"2017-12-12T14:52:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:368"},{"text":"%md\n### 3a) Indexes\n\nThere are already two indexes (with types) available in ElasticSearch:\n* **/cars/cars_db**: An index/type containing the cars for sale on the Belgian market. This index is the result of the individual assignment.\n* **cars_twitter/tweets**: An index/type containing tweets about German cars. This index is the result of part 2 in this assignment.\n\nYou first job is to look at the mappings. Can you answer the following questions:\n* What type is the field **age** in the /cars/cars_db index?\n* What type is the field **brandName** in the /cars/cars_db index?\n* What does the following key-value pair mean?\n            **\"fields\": { \"keyword\": { \"type\": \"keyword\"}}**\n* What does **\"ignore_above: 256\"** mean?\n","user":"anonymous","dateUpdated":"2017-12-12T14:52:55+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>3a) Indexes</h3>\n<p>There are already two indexes (with types) available in ElasticSearch:<br/>* <strong>/cars/cars_db</strong>: An index/type containing the cars for sale on the Belgian market. This index is the result of the individual assignment.<br/>* <strong>cars_twitter/tweets</strong>: An index/type containing tweets about German cars. This index is the result of part 2 in this assignment.</p>\n<p>You first job is to look at the mappings. Can you answer the following questions:<br/>* What type is the field <strong>age</strong> in the /cars/cars_db index?<br/>* What type is the field <strong>brandName</strong> in the /cars/cars_db index?<br/>* What does the following key-value pair mean?<br/> <strong>&ldquo;fields&rdquo;: { &ldquo;keyword&rdquo;: { &ldquo;type&rdquo;: &ldquo;keyword&rdquo;}}</strong><br/>* What does <strong>&ldquo;ignore_above: 256&rdquo;</strong> mean?</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510066011269_1167390841","id":"20171107-144651_854367381","dateCreated":"2017-11-07T14:46:51+0000","dateStarted":"2017-12-12T14:52:55+0000","dateFinished":"2017-12-12T14:52:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:369"},{"text":"%md\n#### Answer","user":"anonymous","dateUpdated":"2017-12-12T14:52:55+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Answer</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510414635719_-1126443789","id":"20171111-153715_1002693180","dateCreated":"2017-11-11T15:37:15+0000","dateStarted":"2017-12-12T14:52:55+0000","dateFinished":"2017-12-12T14:52:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:370"},{"text":"%md\n## 3b) Searching\n\nIn this part, you need to perform queries in ElasticSearch (Kibana). Each query needs to be pasted into the %elasticsearch cell. In the %md cell \"Hits\" the number of hits should be entered. Finally, if an additional qestion is asked, you should answer in the %md cell with \"Answer\".\n","user":"anonymous","dateUpdated":"2017-12-12T14:52:55+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>3b) Searching</h2>\n<p>In this part, you need to perform queries in ElasticSearch (Kibana). Each query needs to be pasted into the %elasticsearch cell. In the %md cell &ldquo;Hits&rdquo; the number of hits should be entered. Finally, if an additional qestion is asked, you should answer in the %md cell with &ldquo;Answer&rdquo;.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510058938855_-1538842025","id":"20171107-124858_745007361","dateCreated":"2017-11-07T12:48:58+0000","dateStarted":"2017-12-12T14:52:55+0000","dateFinished":"2017-12-12T14:52:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:371"},{"text":"%md\n### Question 1 (Example):\nCreate a query that returns all the documents in the cars_twitter/tweets index.\nWas this easy?","user":"anonymous","dateUpdated":"2017-12-12T14:52:55+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Question 1 (Example):</h3>\n<p>Create a query that returns all the documents in the cars_twitter/tweets index.<br/>Was this easy?</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510084971096_-1769172208","id":"20171107-200251_1407364008","dateCreated":"2017-11-07T20:02:51+0000","dateStarted":"2017-12-12T14:52:56+0000","dateFinished":"2017-12-12T14:52:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:372"},{"text":"%elasticsearch\nGET /cars_twitter/tweets/_search\n{\n  \"query\": {\n    \"match_all\": {}\n  }\n}","user":"anonymous","dateUpdated":"2017-12-12T14:52:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Error : None of the configured nodes are available: [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]"}]},"apps":[],"jobName":"paragraph_1510085004520_-1657933804","id":"20171107-200324_2073809367","dateCreated":"2017-11-07T20:03:24+0000","dateStarted":"2017-12-12T14:52:56+0000","dateFinished":"2017-12-12T14:52:59+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:373"},{"text":"%md\n#### Hits\n6538","user":"anonymous","dateUpdated":"2017-12-12T14:52:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Hits</h4>\n<p>6538</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510085076775_-1978891007","id":"20171107-200436_1720905555","dateCreated":"2017-11-07T20:04:36+0000","dateStarted":"2017-12-12T14:52:56+0000","dateFinished":"2017-12-12T14:52:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:374"},{"text":"%md\n#### Answer\nYes, this was easy","user":"anonymous","dateUpdated":"2017-12-12T14:52:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Answer</h4>\n<p>Yes, this was easy</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510085118690_-558135913","id":"20171107-200518_979802783","dateCreated":"2017-11-07T20:05:18+0000","dateStarted":"2017-12-12T14:52:58+0000","dateFinished":"2017-12-12T14:52:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:375"},{"text":"%md\n### Question 2:\nCreate a query that return all the **oldtimers** in the **cars/cars_db** index.","user":"anonymous","dateUpdated":"2017-12-12T14:52:58+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Question 2:</h3>\n<p>Create a query that return all the <strong>oldtimers</strong> in the <strong>cars/cars_db</strong> index.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510085165532_416325782","id":"20171107-200605_65802545","dateCreated":"2017-11-07T20:06:05+0000","dateStarted":"2017-12-12T14:52:58+0000","dateFinished":"2017-12-12T14:52:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:376"},{"text":"%elasticsearch\n","user":"anonymous","dateUpdated":"2017-12-12T14:52:58+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510085162522_1247167223","id":"20171107-200602_1857739100","dateCreated":"2017-11-07T20:06:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:377"},{"text":"%md\n#### Hits\n","user":"anonymous","dateUpdated":"2017-12-12T14:52:58+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Hits</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510085160297_710442508","id":"20171107-200600_722859155","dateCreated":"2017-11-07T20:06:00+0000","dateStarted":"2017-12-12T14:52:59+0000","dateFinished":"2017-12-12T14:52:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:378"},{"text":"%md\n### Question 3:\nFind all the German cars in the cars/cars_bd index.","user":"anonymous","dateUpdated":"2017-12-12T14:52:59+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Question 3:</h3>\n<p>Find all the German cars in the cars/cars_bd index.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510087011646_274573434","id":"20171107-203651_201021837","dateCreated":"2017-11-07T20:36:51+0000","dateStarted":"2017-12-12T14:52:59+0000","dateFinished":"2017-12-12T14:52:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:379"},{"text":"%elasticSearch","user":"anonymous","dateUpdated":"2017-12-12T14:52:59+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"paragraph_1510077584421_-557212805's Interpreter elasticSearch not found"}]},"apps":[],"jobName":"paragraph_1510077584421_-557212805","id":"20171107-175944_1938006390","dateCreated":"2017-11-07T17:59:44+0000","status":"ERROR","errorMessage":"org.apache.zeppelin.interpreter.InterpreterException: paragraph_1510077584421_-557212805's Interpreter elasticSearch not found\n\tat org.apache.zeppelin.notebook.Note.run(Note.java:621)\n\tat org.apache.zeppelin.socket.NotebookServer.persistAndExecuteSingleParagraph(NotebookServer.java:1647)\n\tat org.apache.zeppelin.socket.NotebookServer.runAllParagraphs(NotebookServer.java:1594)\n\tat org.apache.zeppelin.socket.NotebookServer.onMessage(NotebookServer.java:269)\n\tat org.apache.zeppelin.socket.NotebookSocket.onWebSocketText(NotebookSocket.java:59)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextMessage(JettyListenerEventDriver.java:128)\n\tat org.eclipse.jetty.websocket.common.message.SimpleTextMessage.messageComplete(SimpleTextMessage.java:69)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.appendMessage(AbstractEventDriver.java:65)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextFrame(JettyListenerEventDriver.java:122)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.incomingFrame(AbstractEventDriver.java:161)\n\tat org.eclipse.jetty.websocket.common.WebSocketSession.incomingFrame(WebSocketSession.java:309)\n\tat org.eclipse.jetty.websocket.common.extensions.ExtensionStack.incomingFrame(ExtensionStack.java:214)\n\tat org.eclipse.jetty.websocket.common.Parser.notifyFrame(Parser.java:220)\n\tat org.eclipse.jetty.websocket.common.Parser.parse(Parser.java:258)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.readParse(AbstractWebSocketConnection.java:632)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:480)\n\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n\tat java.lang.Thread.run(Thread.java:748)\n","progressUpdateIntervalMs":500,"$$hashKey":"object:380"},{"text":"%md\n#### Hits\n","user":"anonymous","dateUpdated":"2017-12-12T14:52:59+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Hits</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510087067722_-1000640952","id":"20171107-203747_2034577850","dateCreated":"2017-11-07T20:37:47+0000","dateStarted":"2017-12-12T14:53:00+0000","dateFinished":"2017-12-12T14:53:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:381"},{"text":"%md\n### Question 4:\n\nReturn all the cars with a **price** between 20000 and 30000.\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:00+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Question 4:</h3>\n<p>Return all the cars with a <strong>price</strong> between 20000 and 30000.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510066187747_143618345","id":"20171107-144947_1233466800","dateCreated":"2017-11-07T14:49:47+0000","dateStarted":"2017-12-12T14:53:00+0000","dateFinished":"2017-12-12T14:53:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:382"},{"text":"%elasticsearch\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:00+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510087138305_-347044516","id":"20171107-203858_1909677953","dateCreated":"2017-11-07T20:38:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:383"},{"text":"%md\n#### Hits\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:00+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Hits</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510087185809_1582547839","id":"20171107-203945_1147055733","dateCreated":"2017-11-07T20:39:45+0000","dateStarted":"2017-12-12T14:53:00+0000","dateFinished":"2017-12-12T14:53:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:384"},{"text":"%md\n### Question 5:\n\nReturn the models of which the name only consist of numbers. (Hint: **regexp** query)","user":"anonymous","dateUpdated":"2017-12-12T14:53:00+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Question 5:</h3>\n<p>Return the models of which the name only consist of numbers. (Hint: <strong>regexp</strong> query)</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510087210502_-744182002","id":"20171107-204010_2005564903","dateCreated":"2017-11-07T20:40:10+0000","dateStarted":"2017-12-12T14:53:01+0000","dateFinished":"2017-12-12T14:53:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:385"},{"text":"%elasticsearch\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510087441963_-1213470035","id":"20171107-204401_558877299","dateCreated":"2017-11-07T20:44:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:386"},{"text":"%md\n#### Hits\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Hits</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510087470191_844044489","id":"20171107-204430_998765198","dateCreated":"2017-11-07T20:44:30+0000","dateStarted":"2017-12-12T14:53:01+0000","dateFinished":"2017-12-12T14:53:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:387"},{"text":"%md\n### Question 6:\nReturn the tweets that have a **brand** field that is not null.","user":"anonymous","dateUpdated":"2017-12-12T14:53:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Question 6:</h3>\n<p>Return the tweets that have a <strong>brand</strong> field that is not null.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510087497341_574750908","id":"20171107-204457_1084830247","dateCreated":"2017-11-07T20:44:57+0000","dateStarted":"2017-12-12T14:53:01+0000","dateFinished":"2017-12-12T14:53:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:388"},{"text":"%elasticsearch\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510087552114_-1708456335","id":"20171107-204552_1387313909","dateCreated":"2017-11-07T20:45:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:389"},{"text":"%md\n#### Hits\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Hits</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510087574287_1254156168","id":"20171107-204614_1036408860","dateCreated":"2017-11-07T20:46:14+0000","dateStarted":"2017-12-12T14:53:02+0000","dateFinished":"2017-12-12T14:53:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:390"},{"text":"%md\n### Question 7:\n\nReturn the tweets that contain **Mercedes** (case insensitive) in their text body.\n\nHow come the car with id \"AV-XehVbcAXvn561YE47\" is include in the results, while no brand field is present for this car?","user":"anonymous","dateUpdated":"2017-12-12T14:53:02+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Question 7:</h3>\n<p>Return the tweets that contain <strong>Mercedes</strong> (case insensitive) in their text body.</p>\n<p>How come the car with id &ldquo;AV-XehVbcAXvn561YE47&rdquo; is include in the results, while no brand field is present for this car?</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510087618209_2045412801","id":"20171107-204658_1071340092","dateCreated":"2017-11-07T20:46:58+0000","dateStarted":"2017-12-12T14:53:02+0000","dateFinished":"2017-12-12T14:53:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:391"},{"text":"%elasticsearch\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:02+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510087671731_885657023","id":"20171107-204751_803372132","dateCreated":"2017-11-07T20:47:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:392"},{"text":"%md\n#### Hits\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:02+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Hits</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510087699514_-366269926","id":"20171107-204819_243058549","dateCreated":"2017-11-07T20:48:19+0000","dateStarted":"2017-12-12T14:53:02+0000","dateFinished":"2017-12-12T14:53:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:393"},{"text":"%md\n#### Answer\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:02+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Answer</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510087806609_-743923135","id":"20171107-205006_338598437","dateCreated":"2017-11-07T20:50:06+0000","dateStarted":"2017-12-12T14:53:02+0000","dateFinished":"2017-12-12T14:53:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:394"},{"text":"%md\n### Question 8:\n\nReturn the tweets that have **audi** (case insensitive) in their **hashtags** or **mentions**","user":"anonymous","dateUpdated":"2017-12-12T14:53:02+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510087852945_1135606414","id":"20171107-205052_867061780","dateCreated":"2017-11-07T20:50:52+0000","dateStarted":"2017-12-12T14:53:03+0000","dateFinished":"2017-12-12T14:53:03+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:395"},{"text":"%elasticsearch\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:03+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510087854990_1913953439","id":"20171107-205054_816770858","dateCreated":"2017-11-07T20:50:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:396"},{"text":"%md\n#### Hits\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:03+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Hits</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510088230724_593832345","id":"20171107-205710_558949698","dateCreated":"2017-11-07T20:57:10+0000","dateStarted":"2017-12-12T14:53:03+0000","dateFinished":"2017-12-12T14:53:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:397"},{"text":"%md\n### Question 9:\n\nCreate a query that returns the tweets with the exact phrase **\"sports car\"** (case insensitive) in their text.","user":"anonymous","dateUpdated":"2017-12-12T14:53:03+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Question 9:</h3>\n<p>Create a query that returns the tweets with the exact phrase <strong>&ldquo;sports car&rdquo;</strong> (case insensitive) in their text.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510088254113_-1023420523","id":"20171107-205734_354187765","dateCreated":"2017-11-07T20:57:34+0000","dateStarted":"2017-12-12T14:53:03+0000","dateFinished":"2017-12-12T14:53:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:398"},{"text":"%elasticsearch\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:03+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510088354003_-321299753","id":"20171107-205914_2078597174","dateCreated":"2017-11-07T20:59:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:399"},{"text":"%md\n#### Hits\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Hits</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510088366265_-1888766772","id":"20171107-205926_875775641","dateCreated":"2017-11-07T20:59:26+0000","dateStarted":"2017-12-12T14:53:04+0000","dateFinished":"2017-12-12T14:53:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:400"},{"text":"%md\n### Question 10:\nReturn the tweets with **BMW** in their body that have a **positive sentiment**.","user":"anonymous","dateUpdated":"2017-12-12T14:53:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Question 10:</h3>\n<p>Return the tweets with <strong>BMW</strong> in their body that have a <strong>positive sentiment</strong>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510088391851_175608647","id":"20171107-205951_781429318","dateCreated":"2017-11-07T20:59:51+0000","dateStarted":"2017-12-12T14:53:04+0000","dateFinished":"2017-12-12T14:53:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:401"},{"text":"%elasticsearch\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510088454050_-2050255686","id":"20171107-210054_782746589","dateCreated":"2017-11-07T21:00:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:402"},{"text":"%md\n#### Hits\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Hits</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510088467124_-252678176","id":"20171107-210107_1905192816","dateCreated":"2017-11-07T21:01:07+0000","dateStarted":"2017-12-12T14:53:04+0000","dateFinished":"2017-12-12T14:53:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:403"},{"text":"%md\n### Question 11:\nIn ElasticSearch you can accomplish the same result with multiple queries. Can you create a query that returns the same results as question 10, while another query is executed?\n\nWhat is the difference in reasoning between the query you executed in question 10 and 11?","user":"anonymous","dateUpdated":"2017-12-12T14:53:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Question 11:</h3>\n<p>In ElasticSearch you can accomplish the same result with multiple queries. Can you create a query that returns the same results as question 10, while another query is executed?</p>\n<p>What is the difference in reasoning between the query you executed in question 10 and 11?</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510088541329_152001046","id":"20171107-210221_1017706915","dateCreated":"2017-11-07T21:02:21+0000","dateStarted":"2017-12-12T14:53:05+0000","dateFinished":"2017-12-12T14:53:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:404"},{"text":"%elasticSearch\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:05+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"paragraph_1510088639465_-841699738's Interpreter elasticSearch not found"}]},"apps":[],"jobName":"paragraph_1510088639465_-841699738","id":"20171107-210359_514680964","dateCreated":"2017-11-07T21:03:59+0000","status":"ERROR","errorMessage":"org.apache.zeppelin.interpreter.InterpreterException: paragraph_1510088639465_-841699738's Interpreter elasticSearch not found\n\tat org.apache.zeppelin.notebook.Note.run(Note.java:621)\n\tat org.apache.zeppelin.socket.NotebookServer.persistAndExecuteSingleParagraph(NotebookServer.java:1647)\n\tat org.apache.zeppelin.socket.NotebookServer.runAllParagraphs(NotebookServer.java:1594)\n\tat org.apache.zeppelin.socket.NotebookServer.onMessage(NotebookServer.java:269)\n\tat org.apache.zeppelin.socket.NotebookSocket.onWebSocketText(NotebookSocket.java:59)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextMessage(JettyListenerEventDriver.java:128)\n\tat org.eclipse.jetty.websocket.common.message.SimpleTextMessage.messageComplete(SimpleTextMessage.java:69)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.appendMessage(AbstractEventDriver.java:65)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextFrame(JettyListenerEventDriver.java:122)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.incomingFrame(AbstractEventDriver.java:161)\n\tat org.eclipse.jetty.websocket.common.WebSocketSession.incomingFrame(WebSocketSession.java:309)\n\tat org.eclipse.jetty.websocket.common.extensions.ExtensionStack.incomingFrame(ExtensionStack.java:214)\n\tat org.eclipse.jetty.websocket.common.Parser.notifyFrame(Parser.java:220)\n\tat org.eclipse.jetty.websocket.common.Parser.parse(Parser.java:258)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.readParse(AbstractWebSocketConnection.java:632)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:480)\n\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n\tat java.lang.Thread.run(Thread.java:748)\n","progressUpdateIntervalMs":500,"$$hashKey":"object:405"},{"text":"%md\n#### Hits\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:05+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"title":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Hits</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510088656483_906629912","id":"20171107-210416_1638265688","dateCreated":"2017-11-07T21:04:16+0000","dateStarted":"2017-12-12T14:53:05+0000","dateFinished":"2017-12-12T14:53:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:406"},{"text":"%md\n#### Answer","user":"anonymous","dateUpdated":"2017-12-12T14:53:05+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Answer</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510088707950_-1052249332","id":"20171107-210507_1981856283","dateCreated":"2017-11-07T21:05:07+0000","dateStarted":"2017-12-12T14:53:06+0000","dateFinished":"2017-12-12T14:53:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:407"},{"text":"%md\n### Question 12\nReturn tweets that contain **Audi** that do **not** have a **positive sentiment**. Give priority to tweets that contain **R8** without excluding other tweets.","user":"anonymous","dateUpdated":"2017-12-12T14:53:06+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Question 12</h3>\n<p>Return tweets that contain <strong>Audi</strong> that do <strong>not</strong> have a <strong>positive sentiment</strong>. Give priority to tweets that contain <strong>R8</strong> without excluding other tweets.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510415670340_-2005921243","id":"20171111-155430_390444965","dateCreated":"2017-11-11T15:54:30+0000","dateStarted":"2017-12-12T14:53:06+0000","dateFinished":"2017-12-12T14:53:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:408"},{"text":"%elasticsearch\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:06+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510415847922_-657917628","id":"20171111-155727_857658530","dateCreated":"2017-11-11T15:57:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:409"},{"text":"%md\n#### Hits\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:06+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Hits</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510415846186_-1676732715","id":"20171111-155726_683725790","dateCreated":"2017-11-11T15:57:26+0000","dateStarted":"2017-12-12T14:53:06+0000","dateFinished":"2017-12-12T14:53:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:410"},{"text":"%md\n### Question 13\nSimilarly to question 12, find tweets about **Audi**, tweeted from **Singapore**, and have **no negative sentiment**. Give priority to tweets that contain **R8** without excluding other tweets.","user":"anonymous","dateUpdated":"2017-12-12T14:53:06+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Question 13</h3>\n<p>Similarly to question 12, find tweets about <strong>Audi</strong>, tweeted from <strong>Singapore</strong>, and have <strong>no negative sentiment</strong>. Give priority to tweets that contain <strong>R8</strong> without excluding other tweets.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510415844398_1533242682","id":"20171111-155724_1600937479","dateCreated":"2017-11-11T15:57:24+0000","dateStarted":"2017-12-12T14:53:07+0000","dateFinished":"2017-12-12T14:53:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:411"},{"text":"%elasticsearch\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:07+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510415904958_1860556727","id":"20171111-155824_242782188","dateCreated":"2017-11-11T15:58:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:412"},{"text":"%md\n#### Hits\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:07+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Hits</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510415841361_-1149642046","id":"20171111-155721_2141224113","dateCreated":"2017-11-11T15:57:21+0000","dateStarted":"2017-12-12T14:53:07+0000","dateFinished":"2017-12-12T14:53:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:413"},{"text":"%md\n### Question 14\nCreate a query that returns the **young German cars** that do **not** have a **mileage higher or equal to 10000 km**. Give priority to powerful cars with an **engine power greater or equal to 150 kW** without excluding other results.\nNote that we want to use this result on the webpage. We only want to show **3 variabels: \"brandName\", \"modelName\", and \"sellingPrice\"**. Additionally we want to use pagination and show only the second page showing results **10 - 20**.","user":"anonymous","dateUpdated":"2017-12-12T14:53:07+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Question 14</h3>\n<p>Create a query that returns the <strong>young German cars</strong> that do <strong>not</strong> have a <strong>mileage higher or equal to 10000 km</strong>. Give priority to powerful cars with an <strong>engine power greater or equal to 150 kW</strong> without excluding other results.<br/>Note that we want to use this result on the webpage. We only want to show <strong>3 variabels: &ldquo;brandName&rdquo;, &ldquo;modelName&rdquo;, and &ldquo;sellingPrice&rdquo;</strong>. Additionally we want to use pagination and show only the second page showing results <strong>10 - 20</strong>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510416052042_1690344471","id":"20171111-160052_1329510597","dateCreated":"2017-11-11T16:00:52+0000","dateStarted":"2017-12-12T14:53:08+0000","dateFinished":"2017-12-12T14:53:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:414"},{"text":"%elasticsearch\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:08+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510416084207_558807823","id":"20171111-160124_1648684746","dateCreated":"2017-11-11T16:01:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:415"},{"text":"%md\n#### Hits\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:08+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Hits</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510416408168_-1883717757","id":"20171111-160648_870357630","dateCreated":"2017-11-11T16:06:48+0000","dateStarted":"2017-12-12T14:53:08+0000","dateFinished":"2017-12-12T14:53:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:416"},{"text":"%md\n### Question 15\nFinally you should run a query that returns the tweets having **english** as language and contain the phrase **Porche Boxster**. Note that the words \"Porsche\" and \"Boxster\" should be close to each other and **maximum 1 word** can be in between the two words. Additionally the tweets may **NOT** have a **negative sentiment**. For esthetic reasons, the searched terms (Porsche Boxster) should be **highlighted** in bold.","user":"anonymous","dateUpdated":"2017-12-12T14:53:08+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Question 15</h3>\n<p>Finally you should run a query that returns the tweets having <strong>english</strong> as language and contain the phrase <strong>Porche Boxster</strong>. Note that the words &ldquo;Porsche&rdquo; and &ldquo;Boxster&rdquo; should be close to each other and <strong>maximum 1 word</strong> can be in between the two words. Additionally the tweets may <strong>NOT</strong> have a <strong>negative sentiment</strong>. For esthetic reasons, the searched terms (Porsche Boxster) should be <strong>highlighted</strong> in bold.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510416800427_-305678627","id":"20171111-161320_279276607","dateCreated":"2017-11-11T16:13:20+0000","dateStarted":"2017-12-12T14:53:08+0000","dateFinished":"2017-12-12T14:53:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:417"},{"text":"%elasticsearch\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:08+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510066895860_-1805631491","id":"20171107-150135_868457103","dateCreated":"2017-11-07T15:01:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:418"},{"text":"%md\n#### Hits\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Hits</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1510415809994_-1681410999","id":"20171111-155649_559254049","dateCreated":"2017-11-11T15:56:49+0000","dateStarted":"2017-12-12T14:53:09+0000","dateFinished":"2017-12-12T14:53:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:419"},{"text":"%md\n\n<img src=\"https://i.ytimg.com/vi/P4LhWSN3YSw/maxresdefault.jpg\" />\n\n\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src=\"https://i.ytimg.com/vi/P4LhWSN3YSw/maxresdefault.jpg\" />\n</div>"}]},"apps":[],"jobName":"paragraph_1510417098206_864771855","id":"20171111-161818_2119063460","dateCreated":"2017-11-11T16:18:18+0000","dateStarted":"2017-12-12T14:53:09+0000","dateFinished":"2017-12-12T14:53:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:420"},{"text":"%md\n","user":"anonymous","dateUpdated":"2017-12-12T14:53:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510417326264_-602551013","id":"20171111-162206_819307001","dateCreated":"2017-11-11T16:22:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:421"}],"name":"Assignment/Group Assignment","id":"2CY7XZ82G","angularObjects":{"2CUY2SPYF:shared_process":[],"2CX8HYUW5:shared_process":[],"2CVWSTEJX:shared_process":[],"2CU7YVEEU:shared_process":[],"2CVTTTEEJ:shared_process":[],"2CVMK2FSD:shared_process":[],"2CUQGF2H7:shared_process":[],"2CX8NXVEG:shared_process":[],"2CWGP6SAY:shared_process":[],"2CVSHPEMV:shared_process":[],"2CUUZK5C4:shared_process":[],"2CUHNPV2B:shared_process":[],"2CWP2SYTR:shared_process":[],"2CVTV38BV:shared_process":[],"2CVY2C5SC:shared_process":[],"2CVCPP8ZK:shared_process":[],"2CXCAR5P9:shared_process":[],"2CUTDXXD7:shared_process":[],"2CXBMS9S5:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}